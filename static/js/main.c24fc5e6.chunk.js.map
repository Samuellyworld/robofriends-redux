{"version":3,"sources":["containers/loader.svg","components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducer.js","index.js"],"names":["module","exports","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","arial-label","type","placeholder","onChange","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","Scroll","style","overflow","border","height","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","loader","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c24fc5e6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.83c77eeb.svg\";","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='media tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        arial-label=\"search robots\"\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n\t\t super(props);\r\n\t\t this.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n componentDidCatch(error,info) {\r\n \t this.setState({hasError : true})\r\n }\t\r\n\r\n render(){\r\n\t  if(this.state.hasError) {\r\n\t  \treturn <h1> opps, this is not right </h1>\r\n        }\r\n\t\treturn this.props.children\r\n    \t }\r\n\t \r\n}\r\n\r\nexport default ErrorBoundary;\r\n\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid rgba(100,40,100,0.2)', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport loader from './loader.svg';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nimport {setSearchField, requestRobots} from '../actions.js';\r\n\r\nconst MapStateToProps = state => {\r\n  return {\r\n    searchField : state.searchRobots.searchField,\r\n    robots : state.requestRobots.robots,\r\n    isPending : state.requestRobots.isPending,\r\n    error : state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst MapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange : (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots : () => requestRobots(dispatch)\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n\r\ncomponentDidMount() {\r\n  \r\n   this.props.onRequestRobots()\r\n  \r\n  }\r\n\r\n render() { \r\n      const {searchField, onSearchChange, robots, isPending} = this.props;\r\n      const filteredRobots = robots.filter(robot =>{\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n   return (\r\n         <div className='tc'>\r\n           <h1 className='f1'>RoboFriends</h1>\r\n           <SearchBox searchChange={onSearchChange}/>\r\n           <Scroll>\r\n           {isPending ? <img src={loader} alt='loader' className='loader' />  :\r\n            <ErrorBoundary>\r\n             <CardList robots={filteredRobots} />\r\n            </ErrorBoundary>\r\n          }\r\n           \r\n           </Scroll>\r\n         </div>\r\n       );\r\n    }\r\n    }\r\n    \r\n  \r\n\r\n\r\nexport default connect(MapStateToProps,MapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD, GET_ROBOTS_PENDING, GET_ROBOTS_SUCCESS, GET_ROBOTS_FAILED} from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type : CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots =(dispatch) => {\r\n\tdispatch({ type : GET_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n   .then(response=> response.json())\r\n   .then(data => dispatch({type : GET_ROBOTS_SUCCESS, payload : data}))\r\n   .catch(error => dispatch({ type: GET_ROBOTS_FAILED, payload : error}))\r\n}","\r\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const GET_ROBOTS_PENDING = 'GET_ROBOTS_PENDING';\r\nexport const GET_ROBOTS_SUCCESS = 'GET_ROBOTS_SUCCESS';\r\nexport const GET_ROBOTS_FAILED = 'GET_ROBOTS_FAILED';","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {CHANGE_SEARCH_FIELD, GET_ROBOTS_PENDING, GET_ROBOTS_SUCCESS, GET_ROBOTS_FAILED} from './constants.js';\r\n\r\nconst initialStateSearch= {\r\n\tsearchField : ''\r\n}\r\n\r\nexport const searchRobots = (state= initialStateSearch , action ={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase  CHANGE_SEARCH_FIELD :\r\n\t   \t  return Object.assign({}, state, {searchField: action.payload})\r\n\t\tdefault : return state\r\n\t}\r\n}\r\nconst initialStateRobots = {\r\n\tisPending : false,\r\n\trobots : [],\r\n\terror : ''\r\n}\r\nexport const requestRobots = (state=initialStateRobots, action = {}) => {\r\n\tswitch(action.type) {\r\n\t\tcase GET_ROBOTS_PENDING :\r\n\t\t  return Object.assign({}, state, {isPending: true})\r\n\t\tcase GET_ROBOTS_SUCCESS :\r\n\t\t  return Object.assign({}, state, {robots : action.payload, isPending: false})\r\n\t\tcase GET_ROBOTS_FAILED :\r\n\t\t  return Object.assign({}, state, {error : action.payload, isPending: false})\r\n\t\t default: return state;\r\n\t}\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {createLogger} from 'redux-logger';\r\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {searchRobots, requestRobots} from './reducer.js';\r\nimport 'tachyons';\r\n\r\nconst rootReducer = combineReducers({searchRobots, requestRobots})\r\nconst logger = createLogger();\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\nReactDOM.render(\r\n             <Provider store= {store} >\r\n\t          <App />\r\n\t         </Provider>, document.getElementById('root'));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}